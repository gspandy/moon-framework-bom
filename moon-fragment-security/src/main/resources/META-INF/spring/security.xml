<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="casRealm"/>
        <!-- 缓存管理器 -->
        <property name="cacheManager">
            <bean class="org.apache.shiro.cache.ehcache.EhCacheManager">
                <property name="cacheManagerConfigFile"
                          value="${moon.security.cas.securityManager.cacheManager}"></property>
            </bean>
        </property>
        <!-- Remember管理器-->
        <property name="rememberMeManager">
            <bean class="org.apache.shiro.web.mgt.CookieRememberMeManager">
                <property name="cipherKey"
                          value="#{T(org.apache.shiro.codec.Base64).decode('${moon.security.cas.securityManager.rememberMeManager.cipherKey}')}"/>
                <property name="cookie">
                    <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                        <constructor-arg value="rememberMe"/>
                        <property name="httpOnly" value="true"/>
                        <property name="maxAge" value="2592000"/>
                    </bean>
                </property>
            </bean>
        </property>
        <!-- 会话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!-- To reflect the CAS-remember me status in Shiro, you have to define a specific CasSubjectFactory in your Shiro configuration -->
        <property name="subjectFactory">
            <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"/>
        </property>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!--<property name="sessionMode" value="native"/>-->
    </bean>

    <!-- 会话管理器, 为了和CAS的单点登陆配合使用需要让容器自己管理Session, 如果想要使用Shiro的Session, 需要重写CAS的单点登陆想过接口 -->
    <!-- ServletContainerSessionManager, DefaultWebSessionManager, DefaultRemoteWebSessionManager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager"
          autowire="byType">
        <!-- 全局会话超时时间 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 开启删除错误会话 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 开启会话验证调度器 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 会话验证调度器 -->
        <property name="sessionValidationScheduler">
            <bean class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
                <property name="sessionValidationInterval" value="1800000"/>
                <property name="sessionManager" ref="sessionManager"/>
            </bean>
        </property>
        <!-- 会话持久化, 生产环境需要自己实现一个, 替换下面的默认实现, 默认实现仅用于测试环境 -->
        <property name="sessionDAO">
            <bean class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
                <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
                <property name="sessionIdGenerator">
                    <bean class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
                </property>
            </bean>
        </property>
        <!-- 会话Cookie相关 -->
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <constructor-arg value="sid"/>
                <property name="httpOnly" value="true"/>
                <property name="maxAge" value="-1"/>
            </bean>
        </property>
        <property name="sessionListeners">
            <list>
                <ref bean="shiroSingleSignOutSessionListener"/>
            </list>
        </property>
    </bean>

    <!-- 自定义, 覆盖默认的实现, 增加处理异步请求的逻辑实现 -->
    <bean id="webFormAuthenticationFilter"
          class="org.moonframework.fragment.security.WebFormAuthenticationFilter"></bean>

    <bean id="webAnonymousFilter" class="org.moonframework.fragment.security.WebAnonymousFilter">
        <property name="loginUrl" value="${moon.security.cas.filter.loginUrl}"/>
        <property name="ticketGrantedCookieName" value="CASTGC"/>
        <property name="enabled" value="true"/>
    </bean>

    <!-- 单点登出, http://shiro.apache.org/session-management.html#SessionManagement-SessionListeners-->
    <bean id="shiroSingleSignOutFilter" class="org.moonframework.fragment.security.session.ShiroSingleSignOutFilter">
        <property name="handler" ref="shiroSingleSignOutHandler"/>
    </bean>
    <bean id="shiroSingleSignOutHandler" class="org.moonframework.fragment.security.session.ShiroSingleSignOutHandler">
        <property name="sessionMappingStorage" ref="sessionMappingStorage"/>
    </bean>
    <bean id="sessionMappingStorage"
          class="org.moonframework.fragment.security.session.DefaultWebSessionMappingStorage">
    </bean>
    <bean id="shiroSingleSignOutSessionListener"
          class="org.moonframework.fragment.security.session.ShiroSingleSignOutSessionListener">
        <property name="sessionMappingStorage" ref="sessionMappingStorage"/>
    </bean>

    <!-- Logout Filter, Use with shiroFilter -->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${moon.security.cas.filter.redirectUrl}"/>
    </bean>

    <!-- Cas Filter, Use with shiroFilter -->
    <!-- You have to define the service url of your application (which has to be declared also in the CAS server). -->
    <!-- This url will be used to receive CAS service ticket. For example : http://application.examples.com/shiro-cas -->
    <bean id="casFilter" class="org.moonframework.fragment.security.WebCasFilter" autowire="byName">
        <!-- the failure url is called when the service ticket validation fails -->
        <property name="appKey" value="${moon.security.cas.filter.appKey}"/>
        <property name="failureUrl" value="${moon.security.cas.filter.failureUrl}"/>
    </bean>

    <!-- Shiro Filter -->
    <!-- define the web-enabled SecurityManager and the 'shiroFilter' bean that will be referenced from web.xml. -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="${moon.security.cas.filter.loginUrl}"/>
        <property name="successUrl" value="${moon.security.cas.filter.successUrl}"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <map>
                <!-- This way, when the user is redirected to the application service url (/shiro-cas) by the CAS server with a valid service ticket (after authentication), -->
                <!-- this filter receives the service ticket and creates a CasToken which can be used by the CasRealm. -->
                <entry key="cas" value-ref="casFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="singleSignOut" value-ref="shiroSingleSignOutFilter"/>
                <entry key="authc" value-ref="webFormAuthenticationFilter"/>
                <entry key="anon" value-ref="webAnonymousFilter"/>
                <!--delete me <entry key="authenticationFilter" value-ref="statelessAuthenticationFilter"></entry>-->
            </map>
        </property>
        <!-- Finally, you have to define the security of your application. -->
        <!-- http://shiro.apache.org/web.html#Web-defaultfilters, e.g: /protected/** = roles[ROLE_ADMIN] -->
        <property name="filterChainDefinitions">
            <value>
                /shiro-cas = singleSignOut, cas
                /logout = logout
                /protected/** = authc
                ${moon.security.cas.filter.filterChainDefinitions}
                /** = anon, singleSignOut
            </value>
        </property>
    </bean>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="casRealm" class="org.moonframework.fragment.security.WebCasRealm" autowire="byName">
        <!--<property name="service" ref="authorizationService"/>-->
        <property name="userId" value="${moon.security.cas.realm.userId}"/>
        <property name="defaultRoles" value="${moon.security.cas.realm.defaultRoles}"></property>
        <!-- cache -->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="${moon.security.cas.realm.authenticationCachingEnabled}"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="${moon.security.cas.realm.authorizationCachingEnabled}"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
        <!-- The casServerUrlPrefix is the url of the CAS server  -->
        <property name="casServerUrlPrefix" value="${moon.security.cas.realm.casServerUrlPrefix}"/>
        <!-- The casService is the application service url, the url on wich the application receives CAS service ticket(for example : http://application.examples.com/shiro-cas). -->
        <property name="casService" value="${moon.security.cas.realm.casService}"/>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
    <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
    <!-- applications - see the 'Web Applications' section below instead.                 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

</beans>